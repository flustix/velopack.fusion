
static class Platform
{
    public static string() StartProcessBlocking(List<string()> command_line) throws Exception
    {
        if (command_line.Count == 0) {
            throw Exception("Command line is empty");
        }

        string() ret = "";
        native { ret = VMACRO_NativeStartProcessBlocking(command_line); }
        return StrTrim(ret);
    }

    public static void StartProcessFireAndForget(List<string()> command_line) throws Exception
    {
        if (command_line.Count == 0) {
            throw Exception("Command line is empty");
        }
        native { VMACRO_NativeStartProcessFireAndForget(command_line); }
    }

    public static int GetCurrentProcessId()
    {
        int ret = 0;
        native { ret = VMACRO_NativeCurrentProcessId(); }
        return ret;
    }

    public static string() GetCurrentProcessPath()
    {
        string() ret = "";
        native { ret = VMACRO_NativeGetCurrentProcessPath(); }
        return ret;
    }

    public static bool FileExists(string() path)
    {
        bool ret = false;
        native { ret = VMACRO_NativeDoesFileExist(path); }
        return ret;
    }

    public static bool IsInstalled()
    {
        return FileExists(Impl_GetFusionExePath()) && FileExists(Impl_GetUpdateExePath());
    }

    public static string() GetFusionExePath() throws Exception
    {
        string() path = Impl_GetFusionExePath();
        if (!FileExists(path)) {
            throw Exception("Is the app installed? Fusion is not at: " + path);
        }
        return path;
    }

    public static string() GetUpdateExePath() throws Exception
    {
        string() path = Impl_GetUpdateExePath();
        if (!FileExists(path)) {
            throw Exception("Is the app installed? Update is not at: " + path);
        }
        return path;
    }

    static string() Impl_GetFusionExePath()
    {
        string() exeName = "";
        if (IsWindows()) {
            exeName = "Vfusion.exe";
        } else if (IsLinux()) {
            exeName = "VfusionNix";
        } else if (IsOsx()) {
            exeName = "VfusionMac";
        } else {
            assert false, "Unsupported OS";
        }

#if JS
        string() libraryDir = "";
        native { libraryDir = __dirname; }
        return PathJoin(PathJoin(libraryDir, "bin"), exeName);
#else
        return PathJoin(PathParent(GetCurrentProcessPath()), exeName);
#endif
    }

    static string() Impl_GetUpdateExePath()
    {
        string() exePath = GetCurrentProcessPath();
        if (IsWindows()) {
            exePath = PathJoin(PathParent(PathParent(exePath)), "Update.exe");
        } else if (IsLinux()) {
            exePath = PathJoin(PathParent(exePath), "UpdateNix");
        } else if (IsOsx()) {
            exePath = PathJoin(PathParent(exePath), "UpdateMac");
        } else {
            assert false, "Unsupported OS";
        }
        return exePath;
    }

    public static string() StrTrim(string() str)
    {
        Match() match;
        if (match.Find(str, "(\\S.*\\S|\\S)")) {
            return match.GetCapture(1);
        }
        return str;
    }

    public static string() PathParent(string() str)
    {
        int ix_win = str.LastIndexOf("\\");
        int ix_nix = str.LastIndexOf("/");
        int ix = Math.Max(ix_win, ix_nix);
        return str.Substring(0, ix);
    }

    public static string() PathJoin(string() s1, string() s2)
    {
        while (s1.EndsWith("/") || s1.EndsWith("\\")) {
            s1 = s1.Substring(0, s1.Length - 1);
        }
        while (s2.StartsWith("/") || s2.StartsWith("\\")) {
            s2 = s2.Substring(1);
        }
        return s1 + PathSeparator() + s2;
    }

    public static string PathSeparator()
    {
        if (IsWindows()) {
            return "\\";
        } else {
            return "/";
        }
    }

    public static bool IsWindows() { return GetOsName() == "win32"; }
    public static bool IsLinux() { return GetOsName() == "linux"; }
    public static bool IsOsx() { return GetOsName() == "darwin"; }

    public static string() GetOsName()
    {
        string() ret = "";
        native { ret = VMACRO_NativeCurrentOsName(); }
        return ret;
    }

    public static void Exit(int code)
    {
        native { VMACRO_NativeExitProcess(code); }
    }
}