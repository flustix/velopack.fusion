public enum JsonNodeType
{
    Null,
    Bool,
    Array,
    Object,
    Number,
    String
}

enum JsonToken 
{ 
    None, 
    CurlyOpen, 
    CurlyClose, 
    SquareOpen, 
    SquareClose, 
    Colon, 
    Comma, 
    String, 
    Number, 
    Bool, 
    Null
}

public class JsonNode
{
    JsonNodeType Type = JsonNodeType.Null;
    Dictionary<string(), JsonNode#>() ObjectValue;
    List<JsonNode#>() ArrayValue;
    string() StringValue;
    double NumberValue;
    bool BoolValue;

    /// Get the type of this node, such as string, object, array, etc.
    /// You should use this function and then call the corresponding
    /// AsObject, AsArray, AsString, etc. functions to get the actual
    /// parsed json information.
    public JsonNodeType GetKind()
    {
        return Type;
    }

    /// Check if the JSON value is null.
    public bool IsNull()
    {
        return Type == JsonNodeType.Null;
    }

    /// Check if the JSON value is empty - eg. an empty string, array, or object.
    public bool IsEmpty()
    {
        return Type == JsonNodeType.Null 
            || (Type == JsonNodeType.String && StringValue.Length == 0)
            || (Type == JsonNodeType.Array && ArrayValue.Count == 0)
            || (Type == JsonNodeType.Object && ObjectValue.Count == 0);
    }

    /// Reinterpret a JSON value as an object. Throws exception if the value type was not an object.
    public Dictionary<string(), JsonNode#> AsObject() throws Exception
    {
        if (Type != JsonNodeType.Object)
        {
            throw Exception("Cannot call AsObject on JsonNode which is not an object.");
        }
        return ObjectValue;
    }
    /// Reinterpret a JSON value as an array. Throws exception if the value type was not an array.
    public List<JsonNode#> AsArray() throws Exception
    {
        if (Type != JsonNodeType.Array)
        {
            throw Exception("Cannot call AsArray on JsonNode which is not an array.");
        }
        return ArrayValue;
    }

    /// Reinterpret a JSON value as a number. Throws exception if the value type was not a double.
    public double AsNumber() throws Exception
    {
        if (Type != JsonNodeType.Number)
        {
            throw Exception("Cannot call AsNumber on JsonNode which is not a number.");
        }
        return NumberValue;
    }

    /// Reinterpret a JSON value as a boolean. Throws exception if the value type was not a boolean.
    public bool AsBool() throws Exception
    {
        if (Type != JsonNodeType.Bool)
        {
            throw Exception("Cannot call AsBool on JsonNode which is not a boolean.");
        }
        return BoolValue;
    }

    /// Reinterpret a JSON value as a string. Throws exception if the value type was not a string.
    public string AsString() throws Exception
    {
        if (Type != JsonNodeType.String)
        {
            throw Exception("Cannot call AsString on JsonNode which is not a string.");
        }
        return StringValue;
    }

    public static JsonNode# Parse(string text) throws Exception
    {
        JsonParser# parser = new JsonParser();
        parser.Load(text);
        return parser.ParseValue();
    }

    internal void InitBool!(bool value) throws Exception
    {
        if (Type != JsonNodeType.Null)
        {
            throw Exception("Cannot call InitBool on JsonNode which is not null.");
        }
        Type = JsonNodeType.Bool;
        BoolValue = value;
    }

    internal void InitArray!() throws Exception
    {
        if (Type != JsonNodeType.Null)
        {
            throw Exception("Cannot call InitArray on JsonNode which is not null.");
        }
        Type = JsonNodeType.Array;
    }

    internal void AddArrayChild!(JsonNode# child) throws Exception
    {
        if (Type != JsonNodeType.Array)
        {
            throw Exception("Cannot call AddArrayChild on JsonNode which is not an array.");
        }
        ArrayValue.Add(child);
    }

    internal void InitObject!() throws Exception
    {
        if (Type != JsonNodeType.Null)
        {
            throw Exception("Cannot call InitObject on JsonNode which is not null.");
        }
        Type = JsonNodeType.Object;
    }

    internal void AddObjectChild!(string key, JsonNode# child) throws Exception
    {
        if (Type != JsonNodeType.Object)
        {
            throw Exception("Cannot call AddObjectChild on JsonNode which is not an object.");
        }
        ObjectValue[key] = child;
    }

    internal void InitNumber!(double value) throws Exception
    {
        if (Type != JsonNodeType.Null)
        {
            throw Exception("Cannot call InitNumber on JsonNode which is not null.");
        }
        Type = JsonNodeType.Number;
        NumberValue = value;
    }

    internal void InitString!(string value) throws Exception
    {
        if (Type != JsonNodeType.Null)
        {
            throw Exception("Cannot call InitString on JsonNode which is not null.");
        }
        Type = JsonNodeType.String;
        StringValue = value;
    }
}

// https://github.com/gering/Tiny-JSON/blob/master/Tiny-JSON/Tiny-JSON/JsonParser.cs
class JsonParser
{
    string() text = "";
    int position = 0;
    StringStream() builder;

    public void Load!(string text)
    {
        this.text = text;
        this.position = 0;
    }

    public bool EndReached()
    {
        return position >= text.Length;
    }

    public string() ReadN!(int n) throws Exception
    {
        if (position + n > text.Length)
        {
            throw Exception("Unexpected end of input");
        }
        string() result = text.Substring(position, n);
        position += n;
        return result;
    }

    public int Read!()
    {
        if (position >= text.Length)
        {
            return -1;
        }
        int c = text[position];
        position++;
        return c;
    }

    public int Peek()
    {
        if (position >= text.Length)
        {
            return -1;
        }
        return text[position];
    }

    public bool PeekWhitespace()
    {
        int c = Peek();
        return c == ' ' || c == '\t' || c == '\n' || c == '\r';
    }

    public bool PeekWordbreak()
    {
        int c = Peek();
        return c == ' ' || c == ',' || c == ':' || c == '\"' || c == '{' || c == '}' 
            || c == '[' || c == ']' || c == '\t' || c == '\n' || c == '\r' || c == '/';
    }

    JsonToken PeekToken!() {
        EatWhitespace();
        if (EndReached()) return JsonToken.None;
        switch (Peek()) {
            case '{':
                return JsonToken.CurlyOpen;
            case '}':
                return JsonToken.CurlyClose;
            case '[':
                return JsonToken.SquareOpen;
            case ']':
                return JsonToken.SquareClose;
            case ',':
                return JsonToken.Comma;
            case '"':
                return JsonToken.String;
            case ':':
                return JsonToken.Colon;
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case '-':
                return JsonToken.Number;
            case 't':
            case 'f':
                return JsonToken.Bool;
            case 'n':
                return JsonToken.Null;
            case '/':
                // ignore / skip past line and blockcomments
                Read(); // skip the first /
                if (Peek() == '/') { // line comment, read to next \n
                    while (!EndReached() && Peek() != '\n') {
                        Read();
                    }
                    return PeekToken();
                } else if (Peek() == '*') { // block comment, read to */
                    Read(); // skip the *
                    while (!EndReached()) {
                        if (Read() == '*' && Peek() == '/') {
                            Read(); // skip the /
                            return PeekToken();
                        }
                    }
                }
                return JsonToken.None;
            default:
                return JsonToken.None;
        }
    }

    public void EatWhitespace!()
    {
        while (!EndReached() && PeekWhitespace())
        {
            Read();
        }
    }

    public string() ReadWord!()
    {
        builder.Clear();
        while (!EndReached() && !PeekWordbreak())
        {
            builder.WriteChar(Read());
        }
        return builder.ToString();
    }

    public JsonNode# ParseNull!() throws Exception 
    {
        ReadWord();
        JsonNode# node = new JsonNode();
        return node;
    }

    public JsonNode# ParseBool!() throws Exception 
    {
        string() boolValue = ReadWord();
        if (boolValue == "true") {
            JsonNode# node = new JsonNode();
            node.InitBool(true);
            return node;
        } else if (boolValue == "false") {
            JsonNode# node = new JsonNode();
            node.InitBool(false);
            return node;
        } else {
            throw Exception("Invalid boolean");
        }
    }

    public JsonNode# ParseNumber!() throws Exception 
    {
        JsonNode# node = new JsonNode();
        node.InitNumber(Platform.ParseDouble(ReadWord()));
        return node;
    }

    public JsonNode# ParseString!() throws Exception
    {
        builder.Clear();
        Read(); // ditch opening quote
      
        while (true) {
            if (EndReached()) {
                throw Exception("Unterminated string");
            }
            int c = Read();
            switch (c) {
                case '"':
                    JsonNode# node = new JsonNode();
                    node.InitString(builder.ToString());
                    return node;
                case '\\':
                    if (EndReached()) {
                        throw Exception("Unterminated string");
                    }
                    
                    c = Read();
                    switch (c) {
                        case '"':
                        case '\\':
                        case '/':
                            builder.WriteChar(c);
                            break;
                        case 'b':
                            builder.WriteChar(0x0008); // backspace
                            break;
                        case 'f':
                            builder.WriteChar(0x000C); // form feed
                            break;
                        case 'n':
                            builder.WriteChar('\n');
                            break;
                        case 'r':
                            builder.WriteChar('\r');
                            break;
                        case 't':
                            builder.WriteChar('\t');
                            break;
                        case 'u':
                            builder.WriteChar(Platform.ParseHex(ReadN(4)));
                            break;
                    }
                    break;
                default:
                    builder.WriteChar(c);
                    break;
            }
        }
    }

    public JsonNode# ParseObject!() throws Exception
    {
        Read(); // ditch opening brace
        JsonNode# node = new JsonNode();
        node.InitObject();

        while (true) {
            switch (PeekToken()) {
            case JsonToken.None:
                throw Exception("Unterminated object");
            case JsonToken.Comma:
                Read(); // ditch comma
                continue;
            case JsonToken.CurlyClose:
                Read(); // ditch closing brace
                return node;
            default:
                JsonNode# name = ParseString();

                if (PeekToken() != JsonToken.Colon) throw Exception("Expected colon");
                Read(); // ditch the colon

                node.AddObjectChild(name.AsString(), ParseValue());
                break;
            }
        }
    }

    public JsonNode# ParseArray!() throws Exception
    {
        Read(); // ditch opening brace
        JsonNode# node = new JsonNode();
        node.InitArray();

        bool expectComma = false;
        while (true) {
            switch (PeekToken()) {
            case JsonToken.None:
                throw Exception("Unterminated array");		
            case JsonToken.Comma:
                if (!expectComma) {
                    throw Exception("Unexpected comma in array");
                }
                expectComma = false;
                Read(); // ditch comma
                continue;						
            case JsonToken.SquareClose:	
                Read(); // ditch closing brace
                return node;
            default:
                if (expectComma) {
                    throw Exception("Expected comma");
                }
                expectComma = true;
                node.AddArrayChild(ParseValue());
                break;
            }
        }
    }

    public JsonNode# ParseValue!() throws Exception
    {
        switch (PeekToken()) {
        case JsonToken.String:		
            return ParseString();
        case JsonToken.Number:		
            return ParseNumber();
        case JsonToken.Bool:		
            return ParseBool();
        case JsonToken.Null:		
            return ParseNull();
        case JsonToken.CurlyOpen:	
            return ParseObject();
        case JsonToken.SquareOpen:	
            return ParseArray();
        default:
            throw Exception("Invalid token");
        }
    }
}