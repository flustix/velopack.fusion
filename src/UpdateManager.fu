/// This class is used to check for updates, download updates, and apply updates. It is a synchronous version of the UpdateManager class.
/// This class is not recommended for use in GUI applications, as it will block the main thread, so you may want to use the async 
/// UpdateManager class instead, if it is supported for your programming language.
public class UpdateManagerSync
{
    bool _allowDowngrade = false;
    string() _explicitChannel = "";
    string() _urlOrPath = "";

    /// Set the URL or local file path to the update server. This is required before calling CheckForUpdates or DownloadUpdates.
    public void SetUrlOrPath!(string() urlOrPath) { _urlOrPath = urlOrPath; }

    /// Allows UpdateManager to update to a version that's lower than the current version (i.e. downgrading).
    /// This could happen if a release has bugs and was retracted from the release feed, or if you're using
    /// ExplicitChannel to switch channels to another channel where the latest version on that
    /// channel is lower than the current version.
    public void SetAllowDowngrade!(bool allowDowngrade) { _allowDowngrade = allowDowngrade; }

    /// This option should usually be left null. Overrides the default channel used to fetch updates.
    /// The default channel will be whatever channel was specified on the command line when building this release.
    /// For example, if the current release was packaged with '--channel beta', then the default channel will be 'beta'.
    /// This allows users to automatically receive updates from the same channel they installed from. This options
    /// allows you to explicitly switch channels, for example if the user wished to switch back to the 'stable' channel
    /// without having to reinstall the application.
    public void SetExplicitChannel!(string() explicitChannel) { _explicitChannel = explicitChannel; }

    /// Returns the command line arguments to get the current version of the application.
    protected List<string()>() GetCurrentVersionCommand() throws Exception
    {
        List<string()>() command;
        command.Add(Platform.GetFusionExePath());
        command.Add("get-version");
        return command;
    }

    /// Returns the command line arguments to check for updates.
    protected List<string()>() GetCheckForUpdatesCommand() throws Exception
    {
        if (_urlOrPath.Length == 0)
        {
            throw Exception("Please call SetUrlOrPath before trying to check for updates.");
        }

        List<string()>() command;
        command.Add(Platform.GetFusionExePath());
        command.Add("check");
        command.Add("--url");
        command.Add(_urlOrPath);
        if (_allowDowngrade)
        {
            command.Add("--downgrade");
        }
        if (_explicitChannel.Length > 0)
        {
            command.Add("--channel");
            command.Add(_explicitChannel);
        }
        return command;
    }

    /// Returns the command line arguments to download the specified update.
    protected List<string()>() GetDownloadUpdatesCommand(VelopackAsset toDownload) throws Exception
    {
        if (_urlOrPath.Length == 0)
        {
            throw Exception("Please call SetUrlOrPath before trying to download updates.");
        }

        List<string()>() command;
        command.Add(Platform.GetFusionExePath());
        command.Add("download");
        command.Add("--url");
        command.Add(_urlOrPath);
        command.Add("--name");
        command.Add(toDownload.FileName);
        if (_explicitChannel.Length > 0)
        {
            command.Add("--channel");
            command.Add(_explicitChannel);
        }
        return command;
    }

    /// Returns the path to the app's packages directory. This is where updates are downloaded to.
    protected string() GetPackagesDir() throws Exception 
    {
        List<string()>() command;
        command.Add(Platform.GetFusionExePath());
        command.Add("get-packages");
        return Platform.StartProcessBlocking(command);
    }

    /// Returns true if the current app is installed, false otherwise. If the app is not installed, other functions in 
    /// UpdateManager may throw exceptions, so you may want to check this before calling other functions.
    public bool IsInstalled()
    {
        return Platform.IsInstalled();
    }

    /// Get the currently installed version of the application. 
    /// If the application is not installed, this function will throw an exception.
    public string() GetCurrentVersion() throws Exception
    {
        List<string()>() command = GetCurrentVersionCommand();
        return Platform.StartProcessBlocking(command);
    }

    /// This function will check for updates, and return information about the latest 
    /// available release. This function runs synchronously and may take some time to
    /// complete, depending on the network speed and the number of updates available.
    public UpdateInfo#? CheckForUpdates() throws Exception
    {
        List<string()>() command = GetCheckForUpdatesCommand();
        string() output = Platform.StartProcessBlocking(command);
        if (output.Length == 0 || output == "null")
        {
            return null;
        }
        return UpdateInfo.FromJson(output);
    }

    /// Downloads the specified updates to the local app packages directory. If the update contains delta packages and ignoreDeltas=false, 
    /// this method will attempt to unpack and prepare them. If there is no delta update available, or there is an error preparing delta 
    /// packages, this method will fall back to downloading the full version of the update. This function will acquire a global update lock
    /// so may fail if there is already another update operation in progress.
    public void DownloadUpdates(VelopackAsset toDownload) throws Exception
    {
        List<string()>() command = GetDownloadUpdatesCommand(toDownload);
        Platform.StartProcessBlocking(command); // throws on non-zero exit codes
    }

    /// This will exit your app immediately, apply updates, and then optionally relaunch the app using the specified 
    /// restart arguments. If you need to save state or clean up, you should do that before calling this method. 
    /// The user may be prompted during the update, if the update requires additional frameworks to be installed etc.
    public void ApplyUpdatesAndExit(VelopackAsset? toApply) throws Exception
    {
        List<string()>() args;
        WaitExitThenApplyUpdates(toApply, false, false, args);
        Platform.Exit(0);
    }

    /// This will exit your app immediately, apply updates, and then optionally relaunch the app using the specified 
    /// restart arguments. If you need to save state or clean up, you should do that before calling this method. 
    /// The user may be prompted during the update, if the update requires additional frameworks to be installed etc.
    public void ApplyUpdatesAndRestart(VelopackAsset? toApply, List<string()>? restartArgs = null) throws Exception 
    {
        WaitExitThenApplyUpdates(toApply, false, true, restartArgs);
        Platform.Exit(0);
    }

    /// This will launch the Velopack updater and tell it to wait for this program to exit gracefully.
    /// You should then clean up any state and exit your app. The updater will apply updates and then
    /// optionally restart your app. The updater will only wait for 60 seconds before giving up.
    public void WaitExitThenApplyUpdates(VelopackAsset? toApply, bool silent, bool restart, List<string()>? restartArgs = null) throws Exception 
    {
        List<string()>() command;
        command.Add(Platform.GetUpdateExePath());
        if (silent) {
            command.Add("--silent");
        }
        command.Add("apply");
        command.Add("--waitPid");
        command.Add($"{Platform.GetCurrentProcessId()}");

        if (toApply != null) {
            string() packagesDir = GetPackagesDir();
            string() assetPath = Platform.PathJoin(packagesDir, toApply.FileName);
            command.Add("--package");
            command.Add(assetPath);
        }

        if (restart) {
            command.Add("--restart");
        }

        if (restart && restartArgs != null && restartArgs.Count > 0) {
            command.Add("--");
            command.AddRange(restartArgs);
        }

        Platform.StartProcessFireAndForget(command);
    }
}