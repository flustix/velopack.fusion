public enum VelopackAssetType
{
    Unknown,
    Full,
    Delta
}

public class VelopackAsset 
{
    /// The name or Id of the package containing this release.
    internal string() PackageId = "";

    /// The version of this release.
    internal string() Version = "";

    /// The type of asset (eg. full or delta).
    internal VelopackAssetType Type = VelopackAssetType.Unknown;

    /// The filename of the update package containing this release.
    internal string() FileName = "";

    /// The SHA1 checksum of the update package containing this release.
    internal string() Sha1 = "";

    /// The size in bytes of the update package containing this release.
    internal long Size = 0;

    /// The release notes in markdown format, as passed to Velopack when packaging the release.
    internal string() NotesMarkdown = "";

    /// The release notes in HTML format, transformed from Markdown when packaging the release.
    internal string() NotesHTML = "";

    public static VelopackAsset#? FromJson(string json) throws Exception, JsonParseException
    {
        JsonNode# node = JsonNode.Parse(json);
        return FromNode(node);
    }

    public static VelopackAsset#? FromNode(JsonNode# node) throws Exception, JsonParseException
    {
        VelopackAsset#? asset = new VelopackAsset();
        foreach((string k, JsonNode# v) in node.AsObject()) 
        {
            switch (k.ToLower()) 
            {
                case "id":
                    asset.PackageId = v.AsString();
                    break;
                case "version":
                    asset.Version = v.AsString();
                    break;
                case "type":
                    asset.Type = v.AsString().ToLower() == "full" 
                        ? VelopackAssetType.Full : VelopackAssetType.Delta;
                    break;
                case "filename":
                    asset.FileName = v.AsString();
                    break;
                case "sha1":
                    asset.Sha1 = v.AsString();
                    break;
                case "size":
                    asset.Size = Math.Truncate(v.AsNumber());
                    break;
                case "markdown":
                    asset.NotesMarkdown = v.AsString();
                    break;
                case "html":
                    asset.NotesHTML = v.AsString();
                    break;
            }
        }
        return asset;
    }
}

public class UpdateInfo 
{
    internal VelopackAsset#? TargetFullRelease;
    internal bool IsDowngrade = false;
    public static UpdateInfo#? FromJson(string json) throws Exception, JsonParseException
    {
        JsonNode# node = JsonNode.Parse(json);
        UpdateInfo#? updateInfo = new UpdateInfo();
        foreach((string k, JsonNode# v) in node.AsObject()) 
        {
            switch (k.ToLower()) 
            {
                case "targetfullrelease":
                    updateInfo.TargetFullRelease = VelopackAsset.FromNode(v);
                    break;
                case "isdowngrade":
                    updateInfo.IsDowngrade = v.AsBool();
                    break;
            }
        }
        return updateInfo;
    }
}

public class ProgressEvent
{
    internal string() File = "";
    internal bool Complete = false;
    internal int Progress = 0;
    internal string() Error = "";

    public static ProgressEvent#? FromJson(string json) throws Exception, JsonParseException
    {
        JsonNode# node = JsonNode.Parse(json);
        ProgressEvent#? progressEvent = new ProgressEvent();
        foreach((string k, JsonNode# v) in node.AsObject()) 
        {
            switch (k.ToLower()) 
            {
                case "file":
                    progressEvent.File = v.AsString();
                    break;
                case "complete":
                    progressEvent.Complete = v.AsBool();
                    break;
                case "progress":
                    progressEvent.Progress = Math.Truncate(v.AsNumber());
                    break;
                case "error":
                    progressEvent.Error = v.AsString();
                    break;
            }
        }
        return progressEvent;
    }
}